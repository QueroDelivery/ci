# This is a basic workflow to help you get started with Actions
name: CI-K8-BASE
on:
  workflow_call:
    inputs:
      WF_ENV_TYPE:
        type: string
        required: true
      WF_PUBLIC_HOST:
        type: string
        required: false
      WF_KUBE_MIN_REPLICAS:
        type: string
        required: true
      WF_KUBE_MAX_REPLICAS:
        type: string
        required: true
      WF_KUBE_MEMORY_LIMIT:
        type: string
        required: true
      WF_KUBE_MEMORY_REQUEST:  
        type: string
        required: true
      WF_KUBE_CPU_LIMIT:  
        type: string
        required: true
      WF_KUBE_CPU_REQUEST:  
        type: string
        required: true
      WF_KUBE_NODE_GROUP:  
        type: string
        required: true
      WF_KUBE_DEPLOYMENT:
        type: string
        required: true
      WF_SHOW_COMMENT:
        type: boolean
        required: false
      WF_CREATE_PR_IN_MAIN:
        type: boolean
        required: false
      WF_IS_INTERNAL:
        type: boolean
        required: false
        
    secrets:
      WF_KUBE_TYPE:
        required: true
      
      WF_AWS_ACCESS_KEY_ID:
        required: true
      WF_AWS_SECRET_ACCESS_KEY:
        required: true
      WF_AWS_REGION:
        required: true
      
      WF_SERVICE_NAME:
        required: true
      WF_KUBE_NAME:
        required: true
      WF_KUBE_DOMAIN:
        required: true
      
      WF_GITHUB_TOKEN:
        required: true
      
      WF_WHITELIST_SOURCE_RANGE:
        required: false
      
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    name: preparing
    runs-on: ubuntu-latest
    environment: production
    continue-on-error: false
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      
      - name: Checkout tools repo
        uses: actions/checkout@v3
        with:
          ref: v1.0.0
          token: ${{ secrets.WF_GITHUB_TOKEN }} 
          repository: QueroDelivery/kube
          path: .kube
          persist-credentials: false
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.WF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.WF_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.WF_AWS_REGION }}
          role-session-name: ${{ secrets.WF_SERVICE_NAME }}_GitHubActions
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Creating configmap.yaml from aws parameter store
        uses: almerindo/action-env-from-aws-ssm@main
        with:
          output: .kube/${{ secrets.WF_KUBE_NAME }}-env-cm.yaml
          ssm-path: '/${{ inputs.WF_ENV_TYPE }}/${{ secrets.WF_SERVICE_NAME }}'
          format: configmap
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.WF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.WF_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.WF_AWS_REGION }}
          

      - name: Override kubefiles
        run: |
          FILE=setup/.kube
          if [[ -d "$FILE" ]]; then
            echo "$FILE EXIST!" 
            cp -avf setup/.kube/*.yaml .kube/
            echo "Kubefiles Override FINISHED" 
          fi
          echo "Export must be a first line"
          export PATH=$PATH:$PWD
          echo "Show .kube folder"
          ls -lah .kube
          echo "Show PWD"
          pwd

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kubectl"
          chmod u+x kubectl
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator
          chmod u+x aws-iam-authenticator

      - name: Kubernetes Deploy
        env:
          KUBE_NAME: ${{ secrets.WF_KUBE_NAME }}
          KUBE_DOMAIN: ${{ secrets.WF_KUBE_DOMAIN }}
          KUBECONFIG: .kube/config-${{secrets.WF_KUBE_TYPE}}.yaml
          KUBEDEPLOYMENT: .kube/deployment-${{inputs.WF_KUBE_DEPLOYMENT}}.yaml
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: '${{ secrets.WF_SERVICE_NAME }}_${{ inputs.WF_ENV_TYPE}}_repo'
          VERSION_TAG: ${{ github.sha }}
          KUBE_MIN_REPLICAS: ${{ inputs.WF_KUBE_MIN_REPLICAS }}
          PUBLIC_HOST: ${{ inputs.WF_PUBLIC_HOST }}
          KUBE_MAX_REPLICAS: ${{ inputs.WF_KUBE_MAX_REPLICAS }}
          KUBE_MEMORY_LIMIT: ${{ inputs.WF_KUBE_MEMORY_LIMIT }}
          KUBE_MEMORY_REQUEST: ${{ inputs.WF_KUBE_MEMORY_REQUEST }}
          KUBE_CPU_LIMIT: ${{ inputs.WF_KUBE_CPU_LIMIT }}
          KUBE_CPU_REQUEST: ${{ inputs.WF_KUBE_CPU_REQUEST }}
          KUBE_NODE_GROUP: ${{ inputs.WF_KUBE_NODE_GROUP }}
        run: |
          echo "Export must be a first line"
          export PATH=$PATH:$PWD
          echo "Show PWD"
          pwd
          echo "Show .kube folder"
          ls -lah .kube
          echo "Show KUBECONFIG file"
          cat .kube/config-prod.yaml
          kubectl version --client
          kubectl version
          echo "Replacing envs from kube manifests"
          echo "public host ${PUBLIC_HOST}"
          cat .kube/namespace.yaml | envsubst > namespace.yaml
          cat .kube/${KUBE_NAME}-env-cm.yaml | envsubst > ${KUBE_NAME}-env-cm.yaml
          cat ${KUBEDEPLOYMENT} | envsubst > deployment.yaml
          cat .kube/service.yaml | envsubst > service.yaml
          cat .kube/ingress.yaml | envsubst > ingress.yaml
          cat .kube/hpa.yaml | envsubst > hpa.yaml
          echo "Applying namespace"
          kubectl apply -f namespace.yaml
          echo "Applying configmap"
          kubectl apply -f ${KUBE_NAME}-env-cm.yaml
          echo "Applying deployment"
          kubectl apply -f deployment.yaml
          echo "Applying rollout"
          kubectl rollout restart deployment/${KUBE_NAME} -n ${KUBE_NAME}
          kubectl rollout status deployment/${KUBE_NAME} -n ${KUBE_NAME}
          echo "Applying hpa"
          kubectl apply -f hpa.yaml
          echo "Applying service"
          kubectl apply -f service.yaml
          echo "Applying ingress"
          kubectl apply -f ingress.yaml
          echo "URL: https://${KUBE_NAME}${KUBE_DOMAIN}"
      
      - name: Setting the service visibility
        if: ${{ inputs.WF_IS_INTERNAL }}
        id: 'set-visibility'
        env:
          KUBECONFIG: .kube/config-${{secrets.WF_KUBE_TYPE}}.yaml
          KUBE_NAME: ${{ secrets.WF_KUBE_NAME }}
          WHITELIST_SOURCE_RANGE: ${{ secrets.WF_WHITELIST_SOURCE_RANGE}}
        run: |
          echo "Setting thee path"
          export PATH=$PATH:$PWD
          kubectl -n ${KUBE_NAME} annotate --overwrite ingress ${KUBE_NAME} ingress.kubernetes.io/whitelist-source-range=${WHITELIST_SOURCE_RANGE}
          kubectl -n ${KUBE_NAME} annotate --overwrite ingress ${KUBE_NAME} kubernetes.io/whitelist-source-range=${WHITELIST_SOURCE_RANGE} 

      - name: Create comment
        if: ${{ inputs.WF_SHOW_COMMENT }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Segura o link dessa app review aí ó o/
            -   URL: https://${{ secrets.WF_KUBE_NAME }}${{ secrets.WF_KUBE_DOMAIN }}
          reactions: '+1'
      
      - name: Create Pull Request for prod
        if: ${{ inputs.WF_CREATE_PR_IN_MAIN }}
        id: 'open-pr'
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: 'main'
          pr_title: 'Deploy in Prod'
          github_token: ${{ secrets.WF_GITHUB_TOKEN }}

