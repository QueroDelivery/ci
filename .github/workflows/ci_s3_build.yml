name: Build the application and upload to Amazon S3.

on:
  workflow_call:
    inputs:
      project_build_envs:
        required: false
        type: string
      environment_type:
        required: true
        type: string
        default: prod
      node_version: 
        required: false
        type: number
        default: 22
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      S3_BUCKET_NAME:
        required: true

jobs:
  build_and_upload_to_s3:
    name: Deploy build to S3
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment_type == 'preview' && 'stage' || inputs.environment_type }}

    env:
      PREVIEW_PREFIX: preview-pr-${{ github.event.pull_request.number }}
      IS_PREVIEW: ${{ inputs.environment_type == 'preview' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: 'yarn'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Commit message lint
        uses: wagoid/commitlint-github-action@v6
        with:
          token: ${{ secrets.WF_GITHUB_TOKEN }}

      - name: Typescript check
        run: yarn tsc --build

      - name: Test coverage
        run: yarn test:ci

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Comment coverage report
        if: github.event_name == 'pull_request' && inputs.environment_type == 'test'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WF_GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const runId = context.runId;
            const { owner, repo } = context.repo;
            const artifactUrl = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;

            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner,
              repo,
              body: `ðŸ“Š Coverage report uploaded as an artifact. [Click here to view it](${artifactUrl})\n
              ![Coverage GIF](https://i.giphy.com/XIqCQx02E1U9W.webp)`
            });

      - name: Create .env by "project_build_envs" input
        run: |
          printf "%s" "$PROJECT_ENVS" > .env
          echo "âœ… File .env created from input"
        env:
          PROJECT_ENVS: ${{ inputs.project_build_envs }}

      - name: Expose envs
        run: |
          if [ "${{ env.IS_PREVIEW }}" = "true" ]; then
            echo "VITE_BROWSER_ROUTER_BASENAME=/${{ env.PREVIEW_PREFIX }}" >> $GITHUB_ENV
            echo "PUBLIC_URL=/${{ env.PREVIEW_PREFIX }}" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_BASENAME=/${{ env.PREVIEW_PREFIX }}" >> $GITHUB_ENV
            echo "NG_APP_BASENAME=/${{ env.PREVIEW_PREFIX }}/" >> $GITHUB_ENV
            echo "VUE_APP_BASENAME=/${{ env.PREVIEW_PREFIX }}" >> $GITHUB_ENV
          else
            echo "VITE_BROWSER_ROUTER_BASENAME=/" >> $GITHUB_ENV
            echo "PUBLIC_URL=/" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_BASENAME=/" >> $GITHUB_ENV
            echo "NG_APP_BASENAME=/" >> $GITHUB_ENV
            echo "VUE_APP_BASENAME=/" >> $GITHUB_ENV
          fi
        
      - name: Build project
        run: yarn build
        
      - name: Upload to S3
        run: |
          aws s3 sync ./build "$S3_BUCKET_NAME" --delete
      
          aws s3 cp ./build/ "$S3_BUCKET_NAME" --recursive \
            --exclude "index.html" \
            --cache-control "max-age=86400, public" \
            --metadata-directive REPLACE
      
          aws s3 cp ./build/index.html "$S3_BUCKET_NAME/index.html" \
            --cache-control "no-cache, no-store, must-revalidate" \
            --metadata-directive REPLACE
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: >-
            ${{ 
              env.IS_PREVIEW == 'true' 
                && format('s3://{0}/{1}', secrets.S3_BUCKET_NAME, env.PREVIEW_PREFIX) 
                || format('s3://{0}', secrets.S3_BUCKET_NAME) 
            }}
      