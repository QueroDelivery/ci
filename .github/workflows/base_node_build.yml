# This is a basic workflow to help you get started with Actions
name: CI-BASE
on:
  workflow_call:
    inputs:
      WF_NODE_VERSION:
        type: string
        required: true
      WF_ENV_TYPE_DEPLOY:
        type: string
        required: true
      WF_PUBLISH_CODE_COVERAGE:
        type: string
        default: false
        required: false
      WF_BACKSTAGE_URL:
        type: string
        required: false
      WF_FONT_AWESOME_TOKEN:
        type: string
        required: false

    secrets:
      WF_NPM_TOKEN:
        required: true
      WF_NPM_USER:
        required: true
      WF_GITHUB_TOKEN:
        required: true
      WF_REGISTRY:
        required: true
      WF_FONT_AWESOME_TOKEN:
        required: false
    outputs:
      servicename:
        description: "The service name"
        value: ${{ jobs.setup.outputs.output1 }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    environment: ${{inputs.WF_ENV_TYPE_DEPLOY}}
    name: preparing
    env:
      FONT_AWESOME_TOKEN: ${{ secrets.WF_FONT_AWESOME_TOKEN }}
    runs-on: ubuntu-latest
    continue-on-error: false
    outputs:
      output1: ${{ steps.serviceName.outputs.servicename }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.WF_NODE_VERSION }}
          cache: "yarn"
          registry-url: ${{secrets.WF_REGISTRY}}

      - name: Cache NPM dependencies
        id: node-modules-cache
        uses: actions/cache@v4
        env:
          cache-name: node-modules-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: install packages using yarn.lock
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.WF_NPM_TOKEN }}
        run: |
          yarn --frozen-lockfile

      - name: linting
        run: |
          yarn lint

      - name: testing
        env:
          RUN_PUBLISH_COVERAGE: ${{inputs.WF_PUBLISH_CODE_COVERAGE}}
          BACKSTAGE_URL: ${{inputs.WF_BACKSTAGE_URL}}
        run: |
          yarn test:ci
          COMPONENT_NAME=`node -p -e "require('./package.json').name"`
          FILE=coverage/int/cobertura-coverage.xml
          if $RUN_PUBLISH_COVERAGE; then
            if [ -f "$FILE" ]; then
              curl --request POST \
              --url ''$BACKSTAGE_URL'/api/code-coverage/report?entity=component%3Adefault%2F'$COMPONENT_NAME'&coverageType=cobertura' \
              --header 'Content-Type: text/xml' \
              --data @$FILE  
              echo "Sending coverage report to quero developer portal"
            else
               echo "::warning:: $FILE does not exist, code coverage not sended to quero developer portal"
            fi
          fi

      - name: Release
        env:
          NPM_TOKEN: ${{ secrets.WF_NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.WF_GITHUB_TOKEN }}
        run: |
          yarn release

      - name: Getting SERVICE_NAME
        id: serviceName
        run: |
          export SERVICE_NAME=`node -p -e "require('./package.json').name"`
          echo "servicename=$SERVICE_NAME" >> $GITHUB_OUTPUT