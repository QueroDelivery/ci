# This is a basic workflow to help you get started with Actions
name: CI-BASE
on:
  workflow_call:
    inputs:
      WF_NODE_VERSION:
        type: string
        required: true
      WF_PUBLISH_CODE_COVERAGE:
        type: string
        default: false
        required: false
      WF_BACKSTAGE_URL:
        type: string
        required: false

    secrets:
      WF_NPM_TOKEN:
        required: true
      WF_NPM_USER:
        required: true
      WF_GITHUB_TOKEN:
        required: true
      WF_REGISTRY:
        required: true
    outputs:
      servicename:
        description: "The service name"
        value: ${{ jobs.setup.outputs.output1 }}


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:          
  setup:
    name: preparing
    runs-on: ubuntu-latest
    continue-on-error: false
    outputs:
      output1: ${{ steps.serviceName.outputs.servicename }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install packages using pnpm-lock.yaml
        env:
          NPM_TOKEN: ${{ secrets.WF_NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.WF_NPM_TOKEN }}
        run: pnpm install
            
      - uses: actions/setup-node@v3
        env:
          NPM_TOKEN: ${{ secrets.WF_NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.WF_NPM_TOKEN }}
        with:
          node-version: ${{ inputs.WF_NODE_VERSION }}
          registry-url: ${{secrets.WF_REGISTRY}}

      - name: linting
        run: |
          pnpm lint

      - name: testing
        env:
          RUN_PUBLISH_COVERAGE: ${{inputs.WF_PUBLISH_CODE_COVERAGE}}
          BACKSTAGE_URL: ${{inputs.WF_BACKSTAGE_URL}}
        run: |
          pnpm test:ci
          COMPONENT_NAME=`node -p -e "require('./package.json').name"`
          FILE=coverage/int/cobertura-coverage.xml
          if $RUN_PUBLISH_COVERAGE; then
            if [ -f "$FILE" ]; then
              curl --request POST \
              --url ''$BACKSTAGE_URL'/api/code-coverage/report?entity=component%3Adefault%2F'$COMPONENT_NAME'&coverageType=cobertura' \
              --header 'Content-Type: text/xml' \
              --data @$FILE
              echo "Sending coverage report to quero developer portal"
            else
              echo "$FILE does not exist, code coverage not sended to quero developer portal"
            fi
          fi

      - name: Release
        env:
          NPM_TOKEN: ${{ secrets.WF_NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.WF_GITHUB_TOKEN }}
        run: |
          pnpm release

      - name: Getting SERVICE_NAME
        id: serviceName
        run: |
          export SERVICE_NAME=`node -p -e "require('./package.json').name"`
          echo "servicename=$SERVICE_NAME" >> $GITHUB_OUTPUT
