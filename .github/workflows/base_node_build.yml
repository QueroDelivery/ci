# This is a basic workflow to help you get started with Actions
name: CI
on:
  workflow_call:
    inputs:
      WF_ENV_TYPE_STAGE:
        required: true
        type: string
      WF_ENV_TYPE_PROD:
        required: true
        type: string
    secrets:
      WF_NPM_TOKEN:
        required: true
      WF_NPM_USER:
        required: true
      WF_GITHUB_TOKEN:
        required: true
    outputs:
      servicename:
        description: "The service name"
        value: ${{ jobs.example_job.outputs.output1 }}
      envtype:
        description: "The env type"
        value: ${{ jobs.setup.outputs.output2 }} || ${{ jobs.setup.outputs.output3 }}


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    name: preparing
    runs-on: ubuntu-latest
    environment: production
    continue-on-error: false
    strategy:
      matrix:
        node-version: [16.13.0]
    outputs:
      output1: ${{ steps.serviceName.outputs.servicename }}
      output2: ${{ steps.envsStage.outputs.envtype }}
      output3: ${{ steps.envsProd.outputs.envtype }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: install packages using yarn.lock
        run: |
          echo "${{ secrets.WF_NPM_USER }}:registry=https://npm.pkg.github.com" >>  .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.WF_NPM_TOKEN }}" >>  .npmrc
          yarn --frozen-lockfile

      - name: testing
        run: |
          yarn test:unit

      - name: Release
        env:
          NPM_TOKEN: ${{ secrets.WF_NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.WF_GITHUB_TOKEN }}
        run: |
          yarn release

      - name: Getting SERVICE_NAME
        id: serviceName
        run: |
          export SERVICE_NAME=`node -p -e "require('./package.json').name"`
          echo "::set-output name=servicename::$SERVICE_NAME"

      - name: Getting ENV STAGE
        id: envsStage
        if: ${{ github.ref == 'refs/heads/stage' }}
        run: |
          echo "::set-output name=envtype::${{inputs.WF_ENV_TYPE_STAGE}}"

      - name: Getting ENV PROD
        id: envsProd
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          echo "::set-output name=envtype::${{inputs.WF_ENV_TYPE_PROD}}"
