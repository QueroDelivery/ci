name: Build the application, upload to Amazon S3, and invalidate CloudFront cache.

on:
  workflow_call:
    inputs:
      has_semantic_release:
        required: false
        type: boolean
        default: true
      project_build_envs:
        required: false
        type: string
      environment_type:
        required: true
        type: string
        default: prod
      run_tests:
        required: false
        type: boolean
        default: true
      run_lint:
        required: false
        type: boolean
        default: true
      run_tsc:
        required: false
        type: boolean
        default: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      S3_BUCKET_NAME:
        required: true
      CLOUDFRONT_DISTRIBUTION_ID:
        required: false
      WF_GITHUB_TOKEN:
        required: false

jobs:
  clear_s3_preview:
    if: inputs.environment_type == 'clear_preview'
    name: Clear S3 build preview
    runs-on: ubuntu-latest
    environment:
      name: stage

    env:
        PREVIEW_PREFIX: preview-pr-${{ github.event.pull_request.number }}

    steps:
      - name: Remove preview folder from S3
        run: |
          aws s3 rm "s3://${{ secrets.S3_BUCKET_NAME }}/${{ env.PREVIEW_PREFIX }}" --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

  setup_and_upload_build_to_s3:
    if: inputs.environment_type != 'clear_preview'
    name: Deploy build to S3
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment_type == 'preview' && 'stage' || inputs.environment_type }}

    env:
      PREVIEW_PREFIX: preview-pr-${{ github.event.pull_request.number }}
      IS_PREVIEW: ${{ inputs.environment_type == 'preview' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'yarn'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Commit message lint in Preview
        if: inputs.run_lint == true && fromJSON(env.IS_PREVIEW)
        uses: wagoid/commitlint-github-action@v6
        with:
          token: ${{ secrets.WF_GITHUB_TOKEN }}

      - name: Typescript check in Preview
        if: inputs.run_tsc == true && fromJSON(env.IS_PREVIEW)
        run: yarn tsc --build

      - name: Test coverage in Preview
        if: inputs.run_tests == true && fromJSON(env.IS_PREVIEW)
        run: yarn test:ci

      - name: Upload coverage report in Preview
        if: inputs.run_tests == true && fromJSON(env.IS_PREVIEW)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Comment coverage report link in Preview
        if: github.event_name == 'pull_request' && inputs.run_tests == true && fromJSON(env.IS_PREVIEW)
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WF_GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const runId = context.runId;
            const { owner, repo } = context.repo;
            const artifactUrl = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;

            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner,
              repo,
              body: `📊 Coverage report uploaded as an artifact. [Click here to view it](${artifactUrl})\n
              ![Coverage GIF](https://i.giphy.com/XIqCQx02E1U9W.webp)`
            });

      - name: Create .env by "project_build_envs" input
        run: |
          printf "%s" "$PROJECT_ENVS" > .env
          echo "✅ File .env created from input"
        env:
          PROJECT_ENVS: ${{ inputs.project_build_envs }}

      - name: Build release project
        if: ${{ !fromJSON(env.IS_PREVIEW) }}
        run: |
          export NODE_OPTIONS="--max-old-space-size=4096"
          export VITE_BROWSER_ROUTER_BASENAME="/"
          export PUBLIC_URL="/"
          export NEXT_PUBLIC_BASENAME="/"
          export NG_APP_BASENAME="/"
          export VUE_APP_BASENAME="/"
          yarn build

      - name: Build preview project
        if: fromJSON(env.IS_PREVIEW)
        run: |
          export NODE_OPTIONS="--max-old-space-size=4096"
          export VITE_BROWSER_ROUTER_BASENAME="/${{ env.PREVIEW_PREFIX }}"
          export PUBLIC_URL="/${{ env.PREVIEW_PREFIX }}"
          export NEXT_PUBLIC_BASENAME="/${{ env.PREVIEW_PREFIX }}"
          export NG_APP_BASENAME="/${{ env.PREVIEW_PREFIX }}/"
          export VUE_APP_BASENAME="/${{ env.PREVIEW_PREFIX }}"
          yarn build
        
      - name: Upload release to S3
        if: ${{ !fromJSON(env.IS_PREVIEW) }}
        run: |
          aws s3 sync ./build s3://$S3_BUCKET_NAME --delete \

          aws s3 cp ./build/ s3://$S3_BUCKET_NAME --recursive \
            --exclude "index.html" \
            --cache-control "max-age=86400, public" \
            --metadata-directive REPLACE

          aws s3 cp ./build/index.html s3://$S3_BUCKET_NAME/index.html \
            --cache-control "no-cache, no-store, must-revalidate" \
            --metadata-directive REPLACE
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      
      - name: Upload preview to S3
        if: fromJSON(env.IS_PREVIEW)
        run: |
          aws s3 sync ./build "s3://${S3_BUCKET_NAME}/${PREVIEW_PREFIX}" --delete \

          aws s3 cp ./build/ "s3://${S3_BUCKET_NAME}/${PREVIEW_PREFIX}" --recursive \
            --exclude "index.html" \
            --cache-control "max-age=86400, public" \
            --metadata-directive REPLACE

          aws s3 cp ./build/index.html "s3://${S3_BUCKET_NAME}/${PREVIEW_PREFIX}/index.html" \
            --cache-control "no-cache, no-store, must-revalidate" \
            --metadata-directive REPLACE
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

      - name: Verify if has some invalidation with "/*" path
        if: ${{ !fromJSON(env.IS_PREVIEW) }}
        id: check_full_invalidation
        run: |
          DIST_ID="${CLOUDFRONT_DISTRIBUTION_ID}"
          
          echo "🔍 Searching invalidations"
          IDS=$(aws cloudfront list-invalidations \
            --distribution-id "$DIST_ID" \
            --query "InvalidationList.Items[].Id" \
            --output text)

          FOUND="no"

          for ID in $IDS; do
            MATCH=$(aws cloudfront get-invalidation \
              --distribution-id "$DIST_ID" \
              --id "$ID" \
              --query "Invalidation.InvalidationBatch.Paths.Items" \
              --output text | grep -Fx "/*" || true)

            if [[ "$MATCH" == "/*" ]]; then
              FOUND="yes"
              break
            fi
          done

          echo "✅ Invalidation founded? $FOUND"
          echo "has_full_invalidation=$FOUND" >> "$GITHUB_OUTPUT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
  
      - name: Invalidate CloudFront cache (index.html ONLY)
        if: ${{ steps.check_full_invalidation.outputs.has_full_invalidation == 'yes' && !fromJSON(env.IS_PREVIEW) }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/index.html"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}  
          
      - name: Invalidate CloudFront cache (ALL)
        if: ${{ steps.check_full_invalidation.outputs.has_full_invalidation == 'no' && !fromJSON(env.IS_PREVIEW) }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        
      - name: Get CloudFront Domain Name and Alternate Name
        if: ${{ !fromJSON(env.IS_PREVIEW) }}
        id: get_cf_domain
        run: |
          DOMAIN_NAME=$(aws cloudfront get-distribution --id $CLOUDFRONT_DISTRIBUTION_ID \
            --query 'Distribution.DomainName' --output text)
      
          ALTERNATE_NAME=$(aws cloudfront get-distribution --id $CLOUDFRONT_DISTRIBUTION_ID \
            --query 'Distribution.DistributionConfig.Aliases.Items[0]' --output text)
      
          echo "Domain name is: $DOMAIN_NAME"
          echo "Alternate domain (CNAME) is: $ALTERNATE_NAME"
      
          echo "domain_name=$DOMAIN_NAME" >> "$GITHUB_OUTPUT"
          echo "alternate_name=$ALTERNATE_NAME" >> "$GITHUB_OUTPUT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

      - name: Output release URL
        if: ${{ (steps.get_cf_domain.outputs.alternate_name != 'None' || steps.get_cf_domain.outputs.domain_name != '') && !fromJSON(env.IS_PREVIEW) }}
        run: |
          DOMAIN_NAME="${DOMAIN_NAME}"
          ALTERNATE_DOMAIN="${ALTERNATE_DOMAIN}"
      
          if [[ -n "$ALTERNATE_DOMAIN" && "$ALTERNATE_DOMAIN" != "None" ]]; then
            PREVIEW_URL="https://${ALTERNATE_DOMAIN}"
          else
            PREVIEW_URL="https://${DOMAIN_NAME}"
          fi
      
          echo "### 🌐 Preview disponível" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "🔗 $PREVIEW_URL" >> "$GITHUB_STEP_SUMMARY"
        env:
          DOMAIN_NAME: ${{ steps.get_cf_domain.outputs.domain_name }}
          ALTERNATE_DOMAIN: ${{ steps.get_cf_domain.outputs.alternate_name }}

      - name: Get S3 website endpoint preview
        if: github.event_name == 'pull_request' && fromJSON(env.IS_PREVIEW)
        id: get_s3_website_endpoint
        run: |
          BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
          AWS_REGION="${{ secrets.AWS_REGION }}"
      
          WEBSITE_ENDPOINT="http://${BUCKET_NAME}.s3-website-${AWS_REGION}.amazonaws.com"
          echo "website_endpoint=$WEBSITE_ENDPOINT" >> "$GITHUB_OUTPUT"
        
      - name: Output preview URL
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && fromJSON(env.IS_PREVIEW)
        env:
          S3_ENDPOINT: ${{ steps.get_s3_website_endpoint.outputs.website_endpoint }}
          PREVIEW_PREFIX: ${{ env.PREVIEW_PREFIX }}
        with:
          github-token: ${{ secrets.WF_GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const s3Endpoint = process.env.S3_ENDPOINT;
            const previewPrefix = process.env.PREVIEW_PREFIX;
      
            const previewUrl = `${s3Endpoint}/${previewPrefix}`;
      
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Preview disponível: [${previewUrl}](${previewUrl})\n
              ![Coverage GIF](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExZThtYmVtZThra2loajhjbmIzM2ZnNHAxZHQ4aHowcHkzZnV2Nzl5OCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/ukZvSoWXXb3YKNHIsw/giphy.gif)`
            });        
        
      - name: Semantic release
        if: ${{ inputs.has_semantic_release == true && !fromJSON(env.IS_PREVIEW) }}
        env:
          GITHUB_TOKEN: ${{ secrets.WF_GITHUB_TOKEN }}
        run: yarn release