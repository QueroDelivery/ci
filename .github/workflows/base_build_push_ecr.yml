# This is a basic workflow to help you get started with Actions
name: CI-ECR-BASE
on:
  workflow_call:
    inputs:
      WF_SERVICE_NAME:
        type: string
        required: true
      WF_ENV_TYPE:
        type: string
        required: true
      WF_NODE_VERSION:
        type: string
        required: true
    secrets:
      WF_NPM_TOKEN:
        required: true
      WF_NPM_USER:
        required: true
      WF_GITHUB_TOKEN:
        required: true
      WF_AWS_ACCESS_KEY_ID:
        required: true
      WF_AWS_SECRET_ACCESS_KEY:
        required: true
      WF_AWS_REGION:
        required: true
    outputs:
      servicename:
        description: "The service name"
        value: ${{ jobs.setup.outputs.servicename }}
        
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    name: preparing
    runs-on: ubuntu-latest
    environment: production
    continue-on-error: false
    outputs:
      servicename: ${{ steps.service-name.outputs.servicename }}
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      - name: Checkout tools repo
        uses: actions/checkout@v3
        with:
          ref: add-step-create-repository
          token: ${{ secrets.WF_GITHUB_TOKEN }} 
          repository: QueroDelivery/ci
          path: setup/
          persist-credentials: false
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ inputs.WF_NODE_VERSION }}
          cache: 'yarn'
          registry-url: ${{secrets.WF_REGISTRY}}
      
      - name: Configure AWS credentials without role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.WF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.WF_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.WF_AWS_REGION }}

      - name: Create ECR repo if is initial commit
        if: ${{ github.event.head_commit.message }} == "initial commit"
        env:
          REPO_PROD_NAME: ${{inputs.WF_SERVICE_NAME}}_prod_repo
          REPO_STAGE_NAME: ${{inputs.WF_SERVICE_NAME}}_stage_repo
        run:
          
          cd setup
          
          echo "commit message"
          
          echo ${{ github.event.head_commit.message }}

          echo ${{ github.event.head_commit.message }} == "initial commit"

          echo "This step will create repositories on ECR to push docker image to staging and production environments"

          echo ${REPO_PROD_NAME}

          aws ecr describe-repositories --repository-names ${REPO_PROD_NAME} --no-cli-pager || aws ecr  create-repository --repository-name ${REPO_PROD_NAME} --no-cli-pager
            
          echo ${REPO_STAGE_NAME}
          
          aws ecr  describe-repositories --repository-names ${REPO_STAGE_NAME} --no-cli-pager || aws ecr  create-repository --repository-name ${REPO_STAGE_NAME} --no-cli-pager

          aws ecr  get-lifecycle-policy --repository-name ${REPO_PROD_NAME} --no-cli-pager || aws ecr  put-lifecycle-policy --repository-name ${REPO_PROD_NAME} --lifecycle-policy-text file://ecr_policy.json --no-cli-pager
          aws ecr  get-lifecycle-policy --repository-name ${REPO_STAGE_NAME} --no-cli-pager || aws ecr  put-lifecycle-policy --repository-name ${REPO_STAGE_NAME} --lifecycle-policy-text file://ecr_policy.json --no-cli-pager

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Update with new version
        run: |
          echo "getting branch"
          echo ${GITHUB_REF#refs/heads/}
          echo  "Updating the code with released version"
        
          BRANCH=${GITHUB_REF#refs/heads/}
          
          if [[ "$BRANCH" = "stage" || "$BRANCH" = "main" ]]; then
            git pull origin $BRANCH
            echo "Branch updated with the last version"
          else
            echo "Branch does not needs to be updated. Semantic-release had not run yet"
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: '${{inputs.WF_SERVICE_NAME}}_${{inputs.WF_ENV_TYPE}}_repo'
          IMAGE_TAG: latest
          VERSION_TAG: ${{ github.sha }}
          SERVICE_NAME: ${{ inputs.WF_SERVICE_NAME }}
        run: |
          
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          echo "registry=http://registry.npmjs.org/" > .npmrc && echo "${{ secrets.WF_NPM_USER }}:registry=https://npm.pkg.github.com" >> .npmrc && echo "//npm.pkg.github.com/:_authToken=${{ secrets.WF_NPM_TOKEN }}" >> .npmrc
          docker build --build-arg SERVICE_NAME=$SERVICE_NAME -t $ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REPOSITORY:$VERSION_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:$VERSION_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG"
          echo "COMMIT-HASH --> $VERSION_TAG"
          hash=$(git rev-parse HEAD)
          echo $hash
           
      - name: Setting service name outputs
        id: service-name
        run: |
          export SERVICE_NAME=${{inputs.WF_SERVICE_NAME}}
          echo "::set-output name=servicename::$SERVICE_NAME"
