name: promote

on:
  workflow_call:
    inputs:
      FROM_ENV:
        type: string
        required: true
      TO_ENV:
        type: string
        required: true
      ARTIFACT_ID:
        type: string
        required: false  # only used for dev
      ARTIFACT_RUN_ID:
        type: string
        required: false
    secrets:
      WF_GITHUB_TOKEN:
        required: true

    outputs:
      digest:
        description: "The image digest"
        value: ${{ jobs.promote.outputs.digest }}
      image_tag:
        description: "The image tag"
        value: ${{ jobs.promote.outputs.image_tag }}
      version_tag:
        description: "The version tag (commit sha)"
        value: ${{ jobs.promote.outputs.version_tag }}
      service_name:
        description: "The service name"
        value: ${{ jobs.promote.outputs.service_name }}

jobs:
  promote:
    runs-on: ubuntu-latest
    environment: ${{ inputs.TO_ENV }}

    outputs:
      digest: ${{ steps.promote.outputs.digest }}
      image_tag: ${{ steps.promote.outputs.image_tag }}
      version_tag: ${{ steps.promote.outputs.version_tag }}
      service_name: ${{ steps.serviceName.outputs.service_name }}

    steps:
      - name: Checkout deploy-state branch
        uses: actions/checkout@v4
        with:
          ref: deploy-state
          token: ${{ secrets.WF_GITHUB_TOKEN }}

      - name: Get service name
        id: serviceName
        run: |
          SERVICE_NAME=$(node -p -e "require('./package.json').name")
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT

      - name: Download dev artifact (only if FROM_ENV is dev)
        if: ${{ inputs.FROM_ENV == 'dev' }}
        uses: actions/download-artifact@v4
        with:
          name: service-${{ steps.serviceName.outputs.service_name }}-dev-${{ inputs.ARTIFACT_ID }}
          path: dev-meta
          github-token: ${{ secrets.WF_GITHUB_TOKEN }}
          run-id: ${{ inputs.ARTIFACT_RUN_ID }}

      - name: Ensure .deploys/service.json exists
        run: |
          mkdir -p .deploys
          [ -f .deploys/service.json ] || echo '{}' > .deploys/service.json

      - name: Promote image metadata
        id: promote
        run: |
          if [[ "${{ inputs.FROM_ENV }}" == "dev" ]]; then
            cp dev-meta/service.json from.json
          else
            jq --arg env "${{ inputs.FROM_ENV }}" '.[$env]' .deploys/service.json > from.json
          fi

          echo "üì¶ Loaded metadata from ${{ inputs.FROM_ENV }}"
          cat from.json

          DIGEST=$(jq -r '.${{ inputs.FROM_ENV }}.digest' from.json)
          VERSION_TAG=$(jq -r '.${{ inputs.FROM_ENV }}.version_tag' from.json)
          IMAGE_TAG=$(jq -r '.${{ inputs.FROM_ENV }}.image_tag' from.json)

          if [[ -z "$DIGEST" || "$DIGEST" == "null" ]]; then
            echo "‚ùå Missing digest for ${{ inputs.FROM_ENV }}"
            exit 1
          fi

          jq --arg env "${{ inputs.TO_ENV }}" \
             --arg digest "$DIGEST" \
             --arg version_tag "${{ inputs.TO_ENV }}" \
             --arg image_tag "$IMAGE_TAG" \
             '.[$env] = {digest: $digest, version_tag: $version_tag, image_tag: $image_tag}' \
             .deploys/service.json > tmp.json && mv tmp.json .deploys/service.json

          echo "‚úÖ Promoted ${{ steps.serviceName.outputs.service_name }} from ${{ inputs.FROM_ENV }} to ${{ inputs.TO_ENV }}"
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Retag image in ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.NEW_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.NEW_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          REPO: ${{ steps.serviceName.outputs.service_name }}
          FROM_TAG: ${{ steps.promote.outputs.image_tag }}
          TO_TAG: ${{ inputs.TO_ENV }}
          DIGEST: ${{ steps.promote.outputs.digest }}
        run: |
          echo "üîÅ Retagging image in ECR: $REPO from $FROM_TAG (digest: $DIGEST) to $TO_TAG"

          aws ecr put-image \
            --repository-name "$REPO" \
            --image-tag "$TO_TAG" \
            --image-manifest "$(aws ecr batch-get-image \
              --repository-name "$REPO" \
              --image-ids imageDigest=$DIGEST \
              --query 'images[0].imageManifest' \
              --output text)"

          echo "‚úÖ Image retagged in ECR: $REPO:$TO_TAG"
